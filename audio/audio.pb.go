// Code generated by protoc-gen-go. DO NOT EDIT.
// source: audio.proto

/*
Package audio is a generated protocol buffer package.

It is generated from these files:
	audio.proto

It has these top-level messages:
	Request
	Response
*/
package audio

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Audio    []byte `protobuf:"bytes,1,opt,name=audio,proto3" json:"audio,omitempty"`
	LangCode string `protobuf:"bytes,2,opt,name=lang_code,json=langCode" json:"lang_code,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetAudio() []byte {
	if m != nil {
		return m.Audio
	}
	return nil
}

func (m *Request) GetLangCode() string {
	if m != nil {
		return m.LangCode
	}
	return ""
}

type Response struct {
	Transcriptions []string `protobuf:"bytes,1,rep,name=transcriptions" json:"transcriptions,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetTranscriptions() []string {
	if m != nil {
		return m.Transcriptions
	}
	return nil
}

func init() {
	proto.RegisterType((*Request)(nil), "audio.Request")
	proto.RegisterType((*Response)(nil), "audio.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Audio service

type AudioClient interface {
	SpeechToText(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type audioClient struct {
	cc *grpc.ClientConn
}

func NewAudioClient(cc *grpc.ClientConn) AudioClient {
	return &audioClient{cc}
}

func (c *audioClient) SpeechToText(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/audio.Audio/SpeechToText", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Audio service

type AudioServer interface {
	SpeechToText(context.Context, *Request) (*Response, error)
}

func RegisterAudioServer(s *grpc.Server, srv AudioServer) {
	s.RegisterService(&_Audio_serviceDesc, srv)
}

func _Audio_SpeechToText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudioServer).SpeechToText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/audio.Audio/SpeechToText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudioServer).SpeechToText(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Audio_serviceDesc = grpc.ServiceDesc{
	ServiceName: "audio.Audio",
	HandlerType: (*AudioServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SpeechToText",
			Handler:    _Audio_SpeechToText_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "audio.proto",
}

func init() { proto.RegisterFile("audio.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 172 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x2c, 0x4d, 0xc9,
	0xcc, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0x6c, 0xb8, 0xd8, 0x83,
	0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x44, 0xb8, 0x20, 0x62, 0x12, 0x8c, 0x0a, 0x8c, 0x1a,
	0x3c, 0x41, 0x10, 0x8e, 0x90, 0x34, 0x17, 0x67, 0x4e, 0x62, 0x5e, 0x7a, 0x7c, 0x72, 0x7e, 0x4a,
	0xaa, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x07, 0x48, 0xc0, 0x39, 0x3f, 0x25, 0x55, 0xc9,
	0x88, 0x8b, 0x23, 0x28, 0xb5, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x55, 0x48, 0x8d, 0x8b, 0xaf, 0xa4,
	0x28, 0x31, 0xaf, 0x38, 0xb9, 0x28, 0xb3, 0xa0, 0x24, 0x33, 0x3f, 0xaf, 0x58, 0x82, 0x51, 0x81,
	0x59, 0x83, 0x33, 0x08, 0x4d, 0xd4, 0xc8, 0x82, 0x8b, 0xd5, 0x11, 0x6c, 0xb2, 0x3e, 0x17, 0x4f,
	0x70, 0x41, 0x6a, 0x6a, 0x72, 0x46, 0x48, 0x7e, 0x48, 0x6a, 0x45, 0x89, 0x10, 0x9f, 0x1e, 0xc4,
	0x7d, 0x50, 0xf7, 0x48, 0xf1, 0xc3, 0xf9, 0x10, 0x1b, 0x92, 0xd8, 0xc0, 0x2e, 0x37, 0x06, 0x04,
	0x00, 0x00, 0xff, 0xff, 0xed, 0xfc, 0xde, 0x34, 0xc8, 0x00, 0x00, 0x00,
}
